package com.caglar.finalprojectaws.Views;

import com.caglar.finalprojectaws.Controllers.Student;
import com.caglar.finalprojectaws.Controllers.Controllers;
import com.caglar.finalprojectaws.Controllers.Database;
import com.caglar.finalprojectaws.Controllers.Subject;
import static com.caglar.finalprojectaws.ValidationAndMethod.ValidationAndCalculation.*;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class StudentInfoFrame extends javax.swing.JFrame {

    private Student id;

    private Connection con;
    private PreparedStatement prest;
    private Statement st;
    Controllers connect = new Controllers();

    public StudentInfoFrame() {
        initComponents();
    }

    public StudentInfoFrame(Student s1) {
        initComponents();
        this.id = s1;
        studentIdTF.setText(s1.getStudent_id());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StudentInfoPanel = new javax.swing.JPanel();
        personalInfoPanel = new javax.swing.JPanel();
        firstNameLabel = new javax.swing.JLabel();
        surnameLabel = new javax.swing.JLabel();
        studentIdLabel = new javax.swing.JLabel();
        classCodeLabel = new javax.swing.JLabel();
        ppsnLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        dobLabel = new javax.swing.JLabel();
        studentIdTF = new javax.swing.JTextField();
        firstNameTF = new javax.swing.JTextField();
        surnameTF = new javax.swing.JTextField();
        classCodeTF = new javax.swing.JTextField();
        ppsnTF = new javax.swing.JTextField();
        genderTF = new javax.swing.JTextField();
        dobTF = new javax.swing.JTextField();
        searchBTN = new javax.swing.JButton();
        contactDetailsPanel = new javax.swing.JPanel();
        emailLabel = new javax.swing.JLabel();
        phoneNumberLabel = new javax.swing.JLabel();
        addressLineOneLabel = new javax.swing.JLabel();
        addressLineTwo = new javax.swing.JLabel();
        eircodeLabel = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        emailTF = new javax.swing.JTextField();
        phoneNumberTF = new javax.swing.JTextField();
        addressLineOneTF = new javax.swing.JTextField();
        addressLineTwoTF = new javax.swing.JTextField();
        cityTF = new javax.swing.JTextField();
        eircodeTF = new javax.swing.JTextField();
        printBTN = new javax.swing.JButton();
        updateStudentDetailsBTN = new javax.swing.JButton();
        gradesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gradeTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Student Info");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        StudentInfoPanel.setBackground(new java.awt.Color(239, 240, 234));

        personalInfoPanel.setBackground(new java.awt.Color(239, 240, 234));
        personalInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Personal Info"));

        firstNameLabel.setText("First Name");
        firstNameLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        surnameLabel.setText("Surname");
        surnameLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        studentIdLabel.setText("Student ID");
        studentIdLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        classCodeLabel.setText("Class Code");
        classCodeLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        ppsnLabel.setText("PPSN");
        ppsnLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        genderLabel.setText("Gender");
        genderLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        dobLabel.setText("Date of Birth");
        dobLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        studentIdTF.setPreferredSize(new java.awt.Dimension(200, 30));
        studentIdTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                studentIdTFKeyTyped(evt);
            }
        });

        firstNameTF.setPreferredSize(new java.awt.Dimension(200, 30));
        firstNameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstNameTFFocusLost(evt);
            }
        });
        firstNameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                firstNameTFKeyTyped(evt);
            }
        });

        surnameTF.setPreferredSize(new java.awt.Dimension(200, 30));
        surnameTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                surnameTFFocusLost(evt);
            }
        });
        surnameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                surnameTFKeyTyped(evt);
            }
        });

        classCodeTF.setPreferredSize(new java.awt.Dimension(200, 30));
        classCodeTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                classCodeTFKeyTyped(evt);
            }
        });

        ppsnTF.setPreferredSize(new java.awt.Dimension(200, 30));
        ppsnTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ppsnTFKeyTyped(evt);
            }
        });

        genderTF.setPreferredSize(new java.awt.Dimension(200, 30));
        genderTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                genderTFKeyTyped(evt);
            }
        });

        dobTF.setPreferredSize(new java.awt.Dimension(200, 30));
        dobTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dobTFKeyTyped(evt);
            }
        });

        searchBTN.setBackground(new java.awt.Color(0, 153, 153));
        searchBTN.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        searchBTN.setForeground(new java.awt.Color(255, 255, 255));
        searchBTN.setText("Search by Id");
        searchBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchBTNMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchBTNMouseExited(evt);
            }
        });
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout personalInfoPanelLayout = new javax.swing.GroupLayout(personalInfoPanel);
        personalInfoPanel.setLayout(personalInfoPanelLayout);
        personalInfoPanelLayout.setHorizontalGroup(
            personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personalInfoPanelLayout.createSequentialGroup()
                        .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studentIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(surnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ppsnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dobLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dobTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genderTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ppsnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classCodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(surnameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(searchBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        personalInfoPanelLayout.setVerticalGroup(
            personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(searchBTN)
                .addGap(18, 18, 18)
                .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, personalInfoPanelLayout.createSequentialGroup()
                        .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(surnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(surnameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(classCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classCodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(ppsnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ppsnTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(personalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dobLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dobTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        contactDetailsPanel.setBackground(new java.awt.Color(239, 240, 234));
        contactDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contact Details"));

        emailLabel.setText("E-mail");
        emailLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        phoneNumberLabel.setText("Phone Number");
        phoneNumberLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        addressLineOneLabel.setText("Address Line One");
        addressLineOneLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        addressLineTwo.setText("Address Line Two");
        addressLineTwo.setPreferredSize(new java.awt.Dimension(100, 30));

        eircodeLabel.setText("Eircode");
        eircodeLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        cityLabel.setText("City");
        cityLabel.setPreferredSize(new java.awt.Dimension(100, 30));

        emailTF.setPreferredSize(new java.awt.Dimension(300, 30));
        emailTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTFActionPerformed(evt);
            }
        });
        emailTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailTFKeyTyped(evt);
            }
        });

        phoneNumberTF.setPreferredSize(new java.awt.Dimension(300, 30));
        phoneNumberTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneNumberTFKeyTyped(evt);
            }
        });

        addressLineOneTF.setPreferredSize(new java.awt.Dimension(300, 30));
        addressLineOneTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addressLineOneTFKeyTyped(evt);
            }
        });

        addressLineTwoTF.setPreferredSize(new java.awt.Dimension(300, 30));
        addressLineTwoTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addressLineTwoTFKeyTyped(evt);
            }
        });

        cityTF.setPreferredSize(new java.awt.Dimension(300, 30));
        cityTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cityTFKeyTyped(evt);
            }
        });

        eircodeTF.setPreferredSize(new java.awt.Dimension(300, 30));
        eircodeTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                eircodeTFKeyTyped(evt);
            }
        });

        printBTN.setBackground(new java.awt.Color(0, 153, 153));
        printBTN.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        printBTN.setForeground(new java.awt.Color(255, 255, 255));
        printBTN.setText("Print & Save as PDF");
        printBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                printBTNMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                printBTNMouseExited(evt);
            }
        });
        printBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBTNActionPerformed(evt);
            }
        });

        updateStudentDetailsBTN.setBackground(new java.awt.Color(0, 153, 153));
        updateStudentDetailsBTN.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        updateStudentDetailsBTN.setForeground(new java.awt.Color(255, 255, 255));
        updateStudentDetailsBTN.setText("Update Student Details");
        updateStudentDetailsBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateStudentDetailsBTNMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateStudentDetailsBTNMouseExited(evt);
            }
        });
        updateStudentDetailsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStudentDetailsBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contactDetailsPanelLayout = new javax.swing.GroupLayout(contactDetailsPanel);
        contactDetailsPanel.setLayout(contactDetailsPanelLayout);
        contactDetailsPanelLayout.setHorizontalGroup(
            contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                        .addComponent(eircodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eircodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                        .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cityTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                        .addComponent(addressLineTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addressLineTwoTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                        .addComponent(addressLineOneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addressLineOneTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                        .addComponent(phoneNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(phoneNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                        .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(emailTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(printBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateStudentDetailsBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        contactDetailsPanelLayout.setVerticalGroup(
            contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(updateStudentDetailsBTN)
                .addGap(18, 18, 18)
                .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                        .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                                .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                                        .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                                                .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(emailTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(phoneNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(phoneNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(addressLineOneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(addressLineOneTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(addressLineTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addressLineTwoTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cityTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(eircodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eircodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(printBTN)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gradesPanel.setBackground(new java.awt.Color(239, 240, 234));
        gradesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Grades")));

        gradeTable.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        gradeTable.setForeground(new java.awt.Color(0, 153, 153));
        gradeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Code", "First Grade", "Second Grade", "Third Grade", "Final Exam", "Over All"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        gradeTable.setToolTipText("");
        gradeTable.setRowHeight(30);
        gradeTable.setSelectionBackground(new java.awt.Color(0, 204, 204));
        gradeTable.setSelectionForeground(new java.awt.Color(102, 102, 102));
        gradeTable.setShowGrid(true);
        jScrollPane1.setViewportView(gradeTable);

        javax.swing.GroupLayout gradesPanelLayout = new javax.swing.GroupLayout(gradesPanel);
        gradesPanel.setLayout(gradesPanelLayout);
        gradesPanelLayout.setHorizontalGroup(
            gradesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        gradesPanelLayout.setVerticalGroup(
            gradesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        javax.swing.GroupLayout StudentInfoPanelLayout = new javax.swing.GroupLayout(StudentInfoPanel);
        StudentInfoPanel.setLayout(StudentInfoPanelLayout);
        StudentInfoPanelLayout.setHorizontalGroup(
            StudentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StudentInfoPanelLayout.createSequentialGroup()
                .addGroup(StudentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gradesPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(StudentInfoPanelLayout.createSequentialGroup()
                        .addComponent(personalInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        StudentInfoPanelLayout.setVerticalGroup(
            StudentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StudentInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StudentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(personalInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contactDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(gradesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(StudentInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(StudentInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBTNMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBTNMouseEntered
        searchBTN.setBackground(new Color(0, 204, 204));
        searchBTN.setForeground(new Color(102, 102, 102));
    }//GEN-LAST:event_searchBTNMouseEntered

    private void searchBTNMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBTNMouseExited
        searchBTN.setBackground(new Color(0, 153, 153));
        searchBTN.setForeground(new Color(255, 255, 255));
    }//GEN-LAST:event_searchBTNMouseExited

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        // to clean all TF
        firstNameTF.setText("");
        surnameTF.setText("");
        classCodeTF.setText("");
        ppsnTF.setText("");
        genderTF.setText("");
        dobTF.setText("");
        emailTF.setText("");
        phoneNumberTF.setText("");
        addressLineOneTF.setText("");
        addressLineTwoTF.setText("");
        cityTF.setText("");
        eircodeTF.setText("");

        gradeTable.removeAll();

        Student s1 = new Student(studentIdTF.getText());
        Subject sub1 = new Subject();

        //Database connection
        try {
            String url = "jdbc:mysql://" + Database.host + ":" + Database.port + "/" + Database.databaseName;
            con = DriverManager.getConnection(url, Database.userName, Database.password);
            System.out.println("connected");
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        // Fetching student Info by student_id
        try {
            String sql = "SELECT * FROM student WHERE student_id = ?";

            prest = con.prepareStatement(sql);
            prest.setString(1, s1.getStudent_id());

            ResultSet rs = prest.executeQuery();

            if (!rs.next()) {
                DisplayMessage("Student Not Found!!!");
                return;
            } else {
                do {
                    s1.setClass_code(rs.getString(3));
                    s1.setFirst_name(rs.getString(4));
                    s1.setSur_name(rs.getString(5));
                    s1.setPPSN(rs.getString(6));
                    s1.setGender(rs.getString(7));
                    s1.setEmail(rs.getString(8));
                    s1.setPhone_number(rs.getString(9));
                    s1.setAddress_line_one(rs.getString(10));
                    s1.setAddress_line_two(rs.getString(11));
                    s1.setCity(rs.getString(12));
                    s1.setEircode(rs.getString(13));
                    s1.setDate_of_birth(rs.getString(14));
                } while (rs.next());
            }
//            prest.close();
//            rs.close();
            firstNameTF.setText(s1.getFirst_name().toUpperCase());
            surnameTF.setText(s1.getSur_name().toUpperCase());
            classCodeTF.setText(s1.getClass_code().toUpperCase());
            ppsnTF.setText(s1.getPPSN().toUpperCase());
            genderTF.setText(s1.getGender().toUpperCase());
            dobTF.setText(s1.getDate_of_birth().toUpperCase());
            emailTF.setText(s1.getEmail());
            phoneNumberTF.setText(s1.getPhone_number().toUpperCase());
            addressLineOneTF.setText(s1.getAddress_line_one().toUpperCase());
            addressLineTwoTF.setText(s1.getAddress_line_two().toUpperCase());
            cityTF.setText(s1.getCity().toUpperCase());
            eircodeTF.setText(s1.getEircode().toUpperCase());

        } catch (SQLException ex) {
            Logger.getLogger(Controllers.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Fetching student full grade by student_id
        try {
            String sql = "SELECT grade.*,subject.subject_name FROM grade\n"
                    + "INNER JOIN student ON grade.student_id = student.student_id\n"
                    + "INNER JOIN subject ON grade.subject_id = subject.subject_id\n"
                    + "WHERE  grade.student_id = ?";

            prest = con.prepareStatement(sql);
            prest.setString(1, s1.getStudent_id());

            ResultSet rs = prest.executeQuery();

            DefaultTableModel tableModel1 = (DefaultTableModel) gradeTable.getModel();
            tableModel1.getDataVector().removeAllElements();
            if (!rs.next()) {
                DisplayMessage("Student Not Found!!!");
            } else {
                do {
                    Vector row = new Vector();
                    s1.setSubject_id(rs.getString(3));
                    s1.setFirst_grade(rs.getDouble(4));
                    s1.setSecond_grade(rs.getDouble(5));
                    s1.setThird_grade(rs.getDouble(6));
                    s1.setFinal_exam(rs.getDouble(7));
                    s1.setOver_all(rs.getDouble(8));
                    sub1.setSubject_name(rs.getString(9));
                    row.add(s1.getSubject_id() + " " + sub1.getSubject_name());
                    row.add(s1.getFirst_grade());
                    row.add(s1.getSecond_grade());
                    row.add(s1.getThird_grade());
                    row.add(s1.getFinal_exam());
                    row.add(s1.getOver_all());
                    tableModel1.addRow(row);
                } while (rs.next());
            }
            prest.close();
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(Controllers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchBTNActionPerformed

    private void printBTNMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printBTNMouseEntered
        printBTN.setBackground(new Color(0, 204, 204));
        printBTN.setForeground(new Color(102, 102, 102));
    }//GEN-LAST:event_printBTNMouseEntered

    private void printBTNMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printBTNMouseExited
        printBTN.setBackground(new Color(0, 153, 153));
        printBTN.setForeground(new Color(255, 255, 255));
    }//GEN-LAST:event_printBTNMouseExited

    private void printBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBTNActionPerformed
        Student s1 = new Student(studentIdTF.getText());
        Subject sub1 = new Subject();

        //Database connection
        try {
            String url = "jdbc:mysql://" + Database.host + ":" + Database.port + "/" + Database.databaseName;
            con = DriverManager.getConnection(url, Database.userName, Database.password);
            System.out.println("connected");
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        // Fetching student Info by student_id
        try {
            String sql = "SELECT * FROM student WHERE student_id = ?";

            prest = con.prepareStatement(sql);
            prest.setString(1, s1.getStudent_id());

            ResultSet rs = prest.executeQuery();

            if (!rs.next()) {
                DisplayMessage("Student Not Found!!!");
                return;
            } else {
                do {
                    s1.setClass_code(rs.getString(3));
                    s1.setFirst_name(rs.getString(4));
                    s1.setSur_name(rs.getString(5));
                    s1.setPPSN(rs.getString(6));
                    s1.setGender(rs.getString(7));
                    s1.setEmail(rs.getString(8));
                    s1.setPhone_number(rs.getString(9));
                    s1.setAddress_line_one(rs.getString(10));
                    s1.setAddress_line_two(rs.getString(11));
                    s1.setCity(rs.getString(12));
                    s1.setEircode(rs.getString(13));
                    s1.setDate_of_birth(rs.getString(14));
                } while (rs.next());
            }
        } catch (SQLException ex) {
            Logger.getLogger(Controllers.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Fetching student full grade by student_id
        try {
            String sql = "SELECT grade.*,subject.subject_name FROM grade\n"
                    + "INNER JOIN student ON grade.student_id = student.student_id\n"
                    + "INNER JOIN subject ON grade.subject_id = subject.subject_id\n"
                    + "WHERE  grade.student_id = ?";

            prest = con.prepareStatement(sql);
            prest.setString(1, s1.getStudent_id());

            ResultSet rs = prest.executeQuery();

            DefaultTableModel tableModel1 = (DefaultTableModel) gradeTable.getModel();
            tableModel1.getDataVector().removeAllElements();
            if (!rs.next()) {
                DisplayMessage("Student Not Found!!!");
                return;
            } else {
                do {
                    Vector row = new Vector();
                    s1.setSubject_id(rs.getString(3));
                    s1.setFirst_grade(rs.getDouble(4));
                    s1.setSecond_grade(rs.getDouble(5));
                    s1.setThird_grade(rs.getDouble(6));
                    s1.setFinal_exam(rs.getDouble(7));
                    s1.setOver_all(rs.getDouble(8));
                    sub1.setSubject_name(rs.getString(9));
                    row.add(s1.getSubject_id() + " " + sub1.getSubject_name());
                    row.add(s1.getFirst_grade());
                    row.add(s1.getSecond_grade());
                    row.add(s1.getThird_grade());
                    row.add(s1.getFinal_exam());
                    row.add(s1.getOver_all());
                    tableModel1.addRow(row);
                } while (rs.next());
            }
            saveAsPDF(s1.getFirst_name(), s1.getSur_name(), s1.getClass_code(), s1.getPPSN(), s1.getGender(), s1.getDate_of_birth(),
                    s1.getEmail(), s1.getPhone_number(), s1.getAddress_line_one(), s1.getAddress_line_two(), s1.getCity(), s1.getEircode(), gradeTable);
            prest.close();
            rs.close();

        } catch (SQLException ex) {
            Logger.getLogger(Controllers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printBTNActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        if (!studentIdTF.getText().isEmpty()) {
            Student s1 = new Student(studentIdTF.getText());
            Subject sub1 = new Subject();

            //Database connection
            try {
                String url = "jdbc:mysql://" + Database.host + ":" + Database.port + "/" + Database.databaseName;
                con = DriverManager.getConnection(url, Database.userName, Database.password);
                System.out.println("connected");
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }

            // Fetching student Info by student_id
            try {
                String sql = "SELECT * FROM student WHERE student_id = ?";

                prest = con.prepareStatement(sql);
                prest.setString(1, s1.getStudent_id());

                ResultSet rs = prest.executeQuery();

                if (!rs.next()) {
                    DisplayMessage("Student Not Found!!!");
                    return;
                } else {
                    do {
                        s1.setClass_code(rs.getString(3));
                        s1.setFirst_name(rs.getString(4));
                        s1.setSur_name(rs.getString(5));
                        s1.setPPSN(rs.getString(6));
                        s1.setGender(rs.getString(7));
                        s1.setEmail(rs.getString(8));
                        s1.setPhone_number(rs.getString(9));
                        s1.setAddress_line_one(rs.getString(10));
                        s1.setAddress_line_two(rs.getString(11));
                        s1.setCity(rs.getString(12));
                        s1.setEircode(rs.getString(13));
                        s1.setDate_of_birth(rs.getString(14));
                    } while (rs.next());
                }
                firstNameTF.setText(s1.getFirst_name().toUpperCase());
                surnameTF.setText(s1.getSur_name().toUpperCase());
                classCodeTF.setText(s1.getClass_code().toUpperCase());
                ppsnTF.setText(s1.getPPSN().toUpperCase());
                genderTF.setText(s1.getGender().toUpperCase());
                dobTF.setText(s1.getDate_of_birth().toUpperCase());
                emailTF.setText(s1.getEmail());
                phoneNumberTF.setText(s1.getPhone_number().toUpperCase());
                addressLineOneTF.setText(s1.getAddress_line_one().toUpperCase());
                addressLineTwoTF.setText(s1.getAddress_line_two().toUpperCase());
                cityTF.setText(s1.getCity().toUpperCase());
                eircodeTF.setText(s1.getEircode().toUpperCase());

            } catch (SQLException ex) {
                Logger.getLogger(Controllers.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Fetching student full grade by student_id
            try {
                String sql = "SELECT grade.*,subject.subject_name FROM grade\n"
                        + "INNER JOIN student ON grade.student_id = student.student_id\n"
                        + "INNER JOIN subject ON grade.subject_id = subject.subject_id\n"
                        + "WHERE  grade.student_id = ?";

                prest = con.prepareStatement(sql);
                prest.setString(1, s1.getStudent_id());

                ResultSet rs = prest.executeQuery();

                DefaultTableModel tableModel1 = (DefaultTableModel) gradeTable.getModel();
                tableModel1.getDataVector().removeAllElements();
                if (!rs.next()) {
                    DisplayMessage("Student Not Found!!!");
                } else {
                    do {
                        Vector row = new Vector();
                        s1.setSubject_id(rs.getString(3));
                        s1.setFirst_grade(rs.getDouble(4));
                        s1.setSecond_grade(rs.getDouble(5));
                        s1.setThird_grade(rs.getDouble(6));
                        s1.setFinal_exam(rs.getDouble(7));
                        s1.setOver_all(rs.getDouble(8));
                        sub1.setSubject_name(rs.getString(9));
                        row.add(s1.getSubject_id() + " " + sub1.getSubject_name());
                        row.add(s1.getFirst_grade());
                        row.add(s1.getSecond_grade());
                        row.add(s1.getThird_grade());
                        row.add(s1.getFinal_exam());
                        row.add(s1.getOver_all());
                        tableModel1.addRow(row);
                    } while (rs.next());
                }
                prest.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(Controllers.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formWindowOpened

    private void updateStudentDetailsBTNMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateStudentDetailsBTNMouseEntered
        updateStudentDetailsBTN.setBackground(new Color(0, 204, 204));
        updateStudentDetailsBTN.setForeground(new Color(102, 102, 102));
    }//GEN-LAST:event_updateStudentDetailsBTNMouseEntered

    private void updateStudentDetailsBTNMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateStudentDetailsBTNMouseExited
        updateStudentDetailsBTN.setBackground(new Color(0, 153, 153));
        updateStudentDetailsBTN.setForeground(new Color(255, 255, 255));
    }//GEN-LAST:event_updateStudentDetailsBTNMouseExited

    private void updateStudentDetailsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStudentDetailsBTNActionPerformed
        if (!(firstNameTF.getText().toString().isEmpty() || surnameTF.getText().toString().isEmpty())) {
            connect.updateStudentDetail(studentIdTF, classCodeTF, firstNameTF, surnameTF, ppsnTF, genderTF, emailTF,
                    phoneNumberTF, addressLineOneTF, addressLineTwoTF, cityTF, eircodeTF, dobTF);
        } else {
            DisplayMessage("Fill at least first name and sur name");
        }


    }//GEN-LAST:event_updateStudentDetailsBTNActionPerformed

    private void emailTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTFActionPerformed

    private void studentIdTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_studentIdTFKeyTyped
        DigitValidation(evt);
    }//GEN-LAST:event_studentIdTFKeyTyped

    private void firstNameTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_firstNameTFKeyTyped
        LetterValidation(evt);
    }//GEN-LAST:event_firstNameTFKeyTyped

    private void surnameTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_surnameTFKeyTyped
        LetterValidation(evt);
    }//GEN-LAST:event_surnameTFKeyTyped

    private void classCodeTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_classCodeTFKeyTyped
        LetterOrDigitValidation(evt);
    }//GEN-LAST:event_classCodeTFKeyTyped

    private void ppsnTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ppsnTFKeyTyped
        LetterOrDigitValidation(evt);
    }//GEN-LAST:event_ppsnTFKeyTyped

    private void genderTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_genderTFKeyTyped
        LetterValidation(evt);
    }//GEN-LAST:event_genderTFKeyTyped

    private void dobTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dobTFKeyTyped
        dateValidation(evt);
    }//GEN-LAST:event_dobTFKeyTyped

    private void emailTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailTFKeyTyped
        emailValidation(evt, emailTF);
    }//GEN-LAST:event_emailTFKeyTyped

    private void phoneNumberTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneNumberTFKeyTyped
        DigitValidation(evt);
    }//GEN-LAST:event_phoneNumberTFKeyTyped

    private void addressLineOneTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressLineOneTFKeyTyped
        LetterOrDigitOrSpaceValidation(evt);
    }//GEN-LAST:event_addressLineOneTFKeyTyped

    private void addressLineTwoTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressLineTwoTFKeyTyped
        LetterOrDigitOrSpaceValidation(evt);
    }//GEN-LAST:event_addressLineTwoTFKeyTyped

    private void cityTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cityTFKeyTyped
        LetterValidation(evt);
    }//GEN-LAST:event_cityTFKeyTyped

    private void eircodeTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eircodeTFKeyTyped
        LetterOrDigitValidation(evt);
    }//GEN-LAST:event_eircodeTFKeyTyped

    private void firstNameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameTFFocusLost

    }//GEN-LAST:event_firstNameTFFocusLost

    private void surnameTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_surnameTFFocusLost

    }//GEN-LAST:event_surnameTFFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentInfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentInfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentInfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentInfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentInfoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel StudentInfoPanel;
    private javax.swing.JLabel addressLineOneLabel;
    private javax.swing.JTextField addressLineOneTF;
    private javax.swing.JLabel addressLineTwo;
    private javax.swing.JTextField addressLineTwoTF;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityTF;
    private javax.swing.JLabel classCodeLabel;
    private javax.swing.JTextField classCodeTF;
    private javax.swing.JPanel contactDetailsPanel;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JTextField dobTF;
    private javax.swing.JLabel eircodeLabel;
    private javax.swing.JTextField eircodeTF;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTF;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTF;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JTextField genderTF;
    private javax.swing.JTable gradeTable;
    private javax.swing.JPanel gradesPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel personalInfoPanel;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JTextField phoneNumberTF;
    private javax.swing.JLabel ppsnLabel;
    private javax.swing.JTextField ppsnTF;
    private javax.swing.JButton printBTN;
    private javax.swing.JButton searchBTN;
    private javax.swing.JLabel studentIdLabel;
    private javax.swing.JTextField studentIdTF;
    private javax.swing.JLabel surnameLabel;
    private javax.swing.JTextField surnameTF;
    private javax.swing.JButton updateStudentDetailsBTN;
    // End of variables declaration//GEN-END:variables
}
